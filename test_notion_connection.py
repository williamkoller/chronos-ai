#!/usr/bin/env python3
"""
Script r√°pido para testar conectividade com Notion
Use quando quiser verificar se as configura√ß√µes est√£o corretas
"""

import os
import sys
import requests
from dotenv import load_dotenv

# Carrega vari√°veis do .env se existir
load_dotenv()

def test_notion_connection():
    """Testa conectividade b√°sica com Notion"""
    
    # Obt√©m configura√ß√µes
    token = os.getenv('NOTION_TOKEN', '')
    database_id = os.getenv('DATABASE_ID', '')
    
    print("üîç Teste de Conectividade Notion - Chronos AI")
    print("=" * 50)
    
    # Valida√ß√£o b√°sica
    if not token:
        print("‚ùå NOTION_TOKEN n√£o configurado")
        print("üí° Configure no arquivo .env ou vari√°vel de ambiente")
        return False
    
    if not database_id:
        print("‚ùå DATABASE_ID n√£o configurado")
        print("üí° Configure no arquivo .env ou vari√°vel de ambiente")
        return False
    
    print(f"‚úì Token presente: {len(token)} caracteres")
    print(f"‚úì Database ID: {database_id}")
    
    # Headers para API
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json",
        "Notion-Version": "2022-06-28"
    }
    
    # Teste 1: Autentica√ß√£o
    print("\nüîê Testando autentica√ß√£o...")
    try:
        response = requests.get("https://api.notion.com/v1/users/me", headers=headers)
        if response.status_code == 200:
            user = response.json()
            print(f"‚úÖ Conectado como: {user.get('name', 'Usu√°rio')}")
        else:
            print(f"‚ùå Falha na autentica√ß√£o: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False
    
    # Teste 2: Acesso ao Database
    print("\nüìã Testando acesso ao database...")
    try:
        response = requests.get(f"https://api.notion.com/v1/databases/{database_id}", headers=headers)
        if response.status_code == 200:
            db = response.json()
            
            # Extra√ß√£o defensiva do t√≠tulo
            try:
                title_array = db.get("title", [])
                if title_array and len(title_array) > 0:
                    title = title_array[0].get("text", {}).get("content", "Sem t√≠tulo")
                else:
                    title = "Database sem t√≠tulo"
            except (IndexError, KeyError, TypeError) as e:
                title = f"Erro ao extrair t√≠tulo: {type(e).__name__}"
            
            print(f"‚úÖ Database acess√≠vel: {title}")
            
            # Debug: mostra estrutura do t√≠tulo
            print(f"üîç Estrutura do t√≠tulo: {db.get('title', 'Campo title ausente')}")
            
            # Mostra propriedades encontradas
            properties = db.get("properties", {})
            print(f"‚úì {len(properties)} propriedades encontradas")
            
            # Verifica propriedades essenciais
            essential = ["Name", "Category", "Priority", "Status"]
            found_essential = [prop for prop in essential if prop in properties]
            print(f"‚úì Propriedades essenciais: {len(found_essential)}/{len(essential)}")
            
            if len(found_essential) < len(essential):
                missing = [prop for prop in essential if prop not in properties]
                print(f"‚ö†Ô∏è Propriedades ausentes: {', '.join(missing)}")
            
        elif response.status_code == 404:
            print(f"‚ùå Database n√£o encontrado")
            print(f"üí° Verifique se o ID est√° correto: {database_id}")
            return False
        elif response.status_code == 403:
            print(f"‚ùå Sem permiss√£o para acessar o database")
            print(f"üí° Adicione a integra√ß√£o ao database no Notion")
            return False
        else:
            print(f"‚ùå Erro no acesso: {response.status_code}")
            print(f"Resposta: {response.text[:200]}")
            return False
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False
    
    # Teste 3: Query b√°sica
    print("\nüìã Testando query de tarefas...")
    try:
        query_payload = {
            "page_size": 1
        }
        response = requests.post(
            f"https://api.notion.com/v1/databases/{database_id}/query", 
            headers=headers, 
            json=query_payload
        )
        if response.status_code == 200:
            results = response.json().get("results", [])
            print(f"‚úÖ Query executada com sucesso: {len(results)} resultado(s)")
        else:
            print(f"‚ö†Ô∏è Problema na query: {response.status_code}")
            print(f"Resposta: {response.text[:200]}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na query: {e}")
    
    print("\nüéâ Conectividade b√°sica confirmada!")
    print("üí° O Chronos AI deve funcionar corretamente agora")
    return True

if __name__ == "__main__":
    try:
        success = test_notion_connection()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\nüõë Teste interrompido pelo usu√°rio")
        sys.exit(1) 